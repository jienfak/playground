# Jien's zshrc.
autoload -Uz compinit promptinit
compinit
promptinit
zstyle ':completion:*' menu select
setopt correct


shpwd() {
  echo ${${:-/${(j:/:)${(M)${(s:/:)${(D)PWD:h}}#(|.)[^.]}}/${PWD:t}}//\/~/\~}
}

setopt PROMPT_SUBST
PROMPT="%F{yellow}%f%F{red}%n%f@%F{blue}%m%f:%F{yellow}%~%f%(!.#.$)"
RPROMPT="%F{red}[%f%F{brgreen}%T%f%F{red}]%f[%F{yellow}%?%f,%F{blue}%L%f]"

#source ~/path/to/fsh/fast-syntax-highlighting.plugin.zsh
#zplugin light zdharma/fast-syntax-highlighting

echo "Trying to get any editor..."
echo "Checking Neovim..."
which nvim > /dev/null
if test $status = 0 ; then
	# Neovim.
	echo "Got Neovim."
	export EDITOR=$(which nvim)
else
	# Vim.
	echo "Checking Vim..."
	which vim > /dev/null
	if test $status = 0 ; then
		export EDITOR=$(which vim)
	else
		# Nano.
		echo "Checking nano..."
		which nano > /dev/null
		if test $status = 0 ;then
			export EDITOR=$(which nano)
		else
			export EDITOR=$(which cat)
		fi
	fi
fi
alias ed="$EDITOR"
alias edsu="sudo $EDITOR"

# Git status.
git_custom_status(){
}

# Vi Mode.
bindkey -v

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward

EPS1=$RPROMPT
function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
	RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}($(git_custom_status))$EPS1"
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=1

export VISUAL=$(which gvim)
alias edg="$VISUAL"
alias edgsu="$VISUAL"
highlight_plugin="/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

echo "Trying to get highlighting plugin..."
if [ -f $highlight_plugin ]; then
	echo "Got it."
	source $highlight_plugin
else
	echo "Could not get plugin."
fi

#vi_mode_plugin="~/code/scripts/sh/zsh/plugins/vi-mode.plugin.zsh"
#if [ -f $vi_mode_plugin ] ; then
#	source $vi_mode_plugin
#fi

S="$HOME/code/scripts"

# Variables.
echo "Setting variables..."
export PAGER=`which less`
export MANPAGER=$PAGER
	echo "Setting '$PAGER' colors..."
		# Less colors
		export LESS_TERMCAP_md=$'\E[01;31m'
		#export LESS_TERMCAP_md=$(perl -e "print \"\\033[1;31m\"")
		#export LESS_TERMCAP_me=$(perl -e "print \"\\033[0m\"")
		export LESS_TERMCAP_me=$'\E[0m'
			# Underlined
		#export LESS_TERMCAP_us=$(perl -e "print \"\\033[1;32m\";")
		#export LESS_TERMCAP_ue=(perl -e "print \"\033[0m\"; ")
		export LESS_TERMCAP_us=$'\E[01;32m'
		export LESS_TERMCAP_ue=$'\E[0m'
			# Service info
		#export LESS_TERMCAP_so=$(perl -e "print \"\\033[1;33m\";")
		#export LESS_TERMCAP_se=$(perl -e "print \"\\033[0m\";")
		export LESS_TERMCAP_so=$'\E[01;33m'
		export LESS_TERMCAP_se=$'\E[0m'
			# Blinking color
		#export LESS_TERMCAP_mb=$(perl -e "print \"\\033[1;32m\";")
		#export LESS_TERMCAP_me=$(perl -e "print \"\\033[0m\";")
		export LESS_TERMCAP_mb=$'\E[1;34m'
		export LESS_TERMCAP_me=$'\E[0m'

# Aliases.
echo "Setting aliases..."
alias "ls"="ls --color=always"
alias "la"="ls -al --color=always"
alias "ll"="ls --color -l"
alias "sctl"="sudo systemctl"
alias "manpager"=$MANPAGER

# Functions.
echo "Setting functions..."

helpa(){
	# Check manual first.
	man $argv >/dev/null 2>&1
	if [ $status = 0 ] ; then
		man $argv
		echo "Got manual, for $argv."
		return
	fi

	# Check info.
	info --version
	if [ $status = 0 ]  ; then
		echo "Got info page for $argv."
		info $argv	
		if [ $status = 0 ] ; then
			return
		fi
	fi
	
	# Check 'help' options.
	which $argv > /dev/null 2>&1
	if [ $status != 0 ] ; then
		echo "helpa: Program '$argv' not found."
		return 
	fi
	
	eval $argv -h > /dev/null 2>&1
	if [ $status = 0 ] ; then 
		echo "helpa: Worked with '-h' option."
		eval $argv -h | manpager 2>&1
		return
	fi

	eval $argv --help > /dev/null 2>&1
	if [ $status = 0 ] ; then
		echo "helpa: Worked with '--help' option."
		eval $argv --help | manpager 2>&1
		return
	fi

	eval $argv -help > /dev/null 2>&1
	if [ $status = 0 ] ; then
		echo "helpa: Worked with '-help' option"
		eval $argv -help | manpager 2>&1
		return
	fi

	eval $argv help > /dev/null 2>&1
	if [ $status = 0 ] ; then
		echo "helpa: Worked with 'help' option."
		eval $argv help | manpager 2>&1
		return
	fi

	eval $argv > /dev/null 2>&1
	if [ $status = 0 ] ; then
		echo "helpa: Worked without any options."
		eval $argv | manpager 2>&1
		return
	fi

	echo "helpa: Could not get any help!"
}

echo  FAK::Freedom:Anarchy:Knowledge::FAK
echo 'FAKYOU... why are you using zsh? Fish is better.'
